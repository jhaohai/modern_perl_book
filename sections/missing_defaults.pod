=head1 Missing Defaults

Z<missing_defaults>

Perl's language design process has always tried to combine practicality with
expandability, but it was as impossible to predict the future in 1994 as it is
in 2014. Perl 5 expanded the language and made the CPAN possible, but it also
retained backwards compatibility with most Perl 1 code written as far back as
1987.

The best Perl code of 2014 is very different from the best Perl code of 1994 or
the best Perl code of 1987.

X<CPAN; C<Task::Kensho>>

Although Perl includes an extensive core library, it's not comprehensive. Many
of the best modules are available outside of the core, from the CPAN (L<cpan>).
The C<Task::Kensho> meta-distribution includes several other distributions
which represent the best the CPAN has to offer. When you need to solve a
problem, look there first.

There are still plenty of gems in the core, however.

=head2 The strict Pragma

X<C<strict>>
X<pragmas; C<strict>>

The C<strict> pragma (L<pragmas>) allows you to forbid (or re-enable) various
powerful language constructs which offer potential for accidental abuse.

C<strict> forbids symbolic references, requires variable declarations
(L<lexical_scope>), and prohibits the use of undeclared barewords
(L<barewords>). While symbolic references are occasionally necessary
(L<import>), the use of a variable as a variable name offers the possibility of
subtle errors of action at a distance--or, worse, the possibility of
poorly-validated user input manipulating private data for malicious purposes.

Requiring variable declarations helps to detect typos in variable names and
encourages proper scoping of lexical variables. It's easier to see the intended
scope of a lexical variable if all variables have C<my> or C<our> declarations
in the appropriate scope.

C<strict> takes effect in lexical scopes. See C<perldoc strict> for more
details.

=head2 The warnings Pragma

The C<warnings> pragma (L<handling_warnings>) controls the reporting of various
warning classes, such as attempting to stringify the C<undef> value or using
the wrong type of operator on values. It also warns about the use of deprecated
features.

The most useful warnings explain that Perl had trouble understanding what you
meant and had to guess at the proper interpretation. Even though Perl often
guesses correctly, disambiguation on your part will ensure that your programs
run correctly.

The C<warnings> pragma takes effect in lexical scopes. See C<perldoc
perllexwarn> and C<perldoc warnings> for more details.

=begin tip Asking for More Help

If you use both C<warnings> with C<diagnostics>, you'll get expanded diagnostic
messages for each warning present in your programs, straight out of C<perldoc
perldiag>. It's a great help when learning Perl, but be sure to disable
C<diagnostics> before deploying your program, lest you fill up your logs or
expose debugging information to users.

=end tip

=head2 C<IO::File> and C<IO::Handle>

X<C<IO::File>>
X<C<IO::Handle>>

Before Perl 5.14, lexical filehandles were objects of the C<IO::Handle> class,
but you had to load C<IO::Handle> explicitly before you could call methods on
them. As of Perl 5.14, lexical filehandles are instances of C<IO::File> and
Perl loads it for you.

Add C<use IO::Handle;> to code running on Perl 5.12 or earlier if you call
methods on lexical filehandles.

=head2 The autodie Pragma

Z<autodie>
X<C<autodie> pragma>
X<pragmas; C<autodie>>

Perl leaves error handling (or error ignoring) up to you. If you forget to
check the return value of every C<open()> call, for example, you could try to
read from a closed filehandle--or worse, lose data as you try to write to one.
The C<autodie> pragma changes this for you. If you write:

=begin programlisting

    use autodie;

    open my $fh, '>', $file;

=end programlisting

... an unsuccessful C<open()> call will throw an exception. Given that the most
appropriate approach to a failed system call is throwing an exception, this
pragma can remove a lot of boilerplate code and allow you the peace of mind of
knowing that you haven't forgotten to check a return value. See C<perldoc
autodie> for more information.

=head2 Perl Version Numbers

Z<version_numbers>
X<CPAN; C<Perl::MinimumVersion>>

If you encounter a piece of Perl code without knowing when it was written or
who wrote it, can you tell which version of Perl it requires? If you have a lot
of experience with Perl both before and after the release of Perl 5.10, you
might remember which version added C<say> and when C<autodie> entered the core.
Otherwise, you might have to guess, trawl through C<perldelta> files, or use
C<CPAN::MinimumVersion> from the CPAN.

There's no requirement for you to add the minimum required Perl version number
to all new code you write, but it I<can> clarify your intentions. For example,
if you've tested your code with Perl 5.12 and use only features present in Perl
5.12, write:

=begin programlisting

    use 5.012;

=end programlisting

... and you'll document your intent. You'll also make it easier for tools to
identify the particular features of Perl you may or may not use in this code.
If someone comes along later and proves that the code works just fine on Perl
5.10, you can change the version number--and you'll do so based on practical
evidence.
