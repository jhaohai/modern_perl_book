=head1 Values

Z<values>

X<variables>
X<values>

As you gain experience, you'll discover that the structure of your programs
will depend on the way you model your data with variables.

Variables allow the abstract manipulation of data while the values they hold
make programs concrete and useful. The more accurate your values, the better
your programs. These values are your aunt's name and address, the distance
between your office and a golf course on the moon, or the weight of all of the
cookies you've eaten in the past year. Within your program, the rules regarding
the format of that data are often strict.

Effective programs need effective (simple, fast, efficient, easy to use) ways
of representing their data.

=head2 Strings

X<strings>

A I<string> is a piece of textual or binary data with no particular formatting
or contents. It could be your name, the contents of an image file, or the
source code of the program itself. A string has meaning in the program only
when you give it meaning.

X<strings; delimiters>

To represent a literal string in your program, surround it with a pair of
quoting characters. The most common I<string delimiters> are single and double
quotes:

=begin programlisting

    my $name    = B<'Donner Odinson, Bringer of Despair'>;
    my $address = B<"Room 539, Bilskirnir, Valhalla">;

=end programlisting

X<strings; single-quoted>

Characters in a I<single-quoted string> are exactly and only ever what they
appear to be, with two exceptions. To include a single quote inside a
single-quoted string, escaping it with a leading backslash:

=begin programlisting

    my $reminder = 'DonB<\'>t forget to escape '
                 . 'the single quote!';

=end programlisting

If you want a backslash at the I<end> of the string, you'll have to escape it
as well, to avoid making Perl think you're trying to escape the closing
delimiterN<Programming language design is full of corner cases like this.>:

=begin programlisting

    my $exception = 'This string ends with a '
                  . 'backslash, not a quote: B<\\>';

=end programlisting

Any other backslash will be part of the string as it appears, unless you have
two adjacent backslashes, in which case Perl will believe that you intended to
escape the second:

=begin programlisting

    is('Modern B<\> Perl', 'Modern B<\\> Perl',
        'single quotes backslash escaping');

=end programlisting

X<strings; double-quoted>

A I<double-quoted string> gives you more options. For example, you may encode
otherwise invisible whitespace characters in the string:

=begin programlisting

    my $tab       = "B<\t>";
    my $newline   = "B<\n>";
    my $carriage  = "B<\r>";
    my $formfeed  = "B<\f>";
    my $backspace = "B<\b>";

=end programlisting

This demonstrates a useful principle: there are multiple possible
representations of the same string. You can include a tab within a string by
typing the C<\t> escape sequence or by hitting the Tab key on your keyboard.
Within Perl's purview, both strings behave the same way, even though the
representation of the string may differ in the source code.

A string declaration may cross (and include) newlines, so these two
declarations are equivalent:

=begin programlisting

    my $escaped = "two\nlines";
    my $literal = "two
    lines";
    is $escaped, $literal, 'equivalent \n and newline';

=end programlisting

With that said, the escape sequences are often much easier to read than their
literal equivalents.

X<concatenation>
X<strings; concatenation>
X<operators; C<.>>

As you manipulate and modify strings, Perl will change their sizes as
appropriate; these strings have variable lengths. For example, you can combine
multiple strings into a larger string with the I<concatenation> operator C<.>:

=begin programlisting

    my $kitten = 'Choco' . ' ' . 'Spidermonkey';

=end programlisting

... though this is effectively the same as if you'd initialized the string all
at once.

X<interpolation>
X<strings; interpolation>

You may also I<interpolate> the value of a scalar variable or the values of an
array within a double-quoted string, such that the I<current> contents of the
variable become part of the string as if you'd concatenated them:

=begin programlisting

    my $factoid = "B<$name> lives at B<$address>!";

    # equivalent to
    my $factoid = $name . ' lives at ' . $address . '!';

=end programlisting

X<escaping>

Include a literal double-quote inside a double-quoted string by I<escaping> it
with a leading backslash:

=begin programlisting

    my $quote = "\"Ouch,\", he cried.  \"That I<hurt>!\"";

=end programlisting

X<operators; quoting>
X<C<q>; single quoting operator>
X<operators; C<q>>
X<C<qq>; double quoting operator>
X<operators; C<qq>>

When repeated backslashing becomes unwieldy, use a I<quoting operator>, which
allows you to choose an alternate string delimiter. The C<q> operator indicates
single quoting (no interpolation), while the C<qq> operator provides double
quoting behavior (interpolation). The character immediately following the
operator determines the characters used to delimit the strings. If the
character is the opening character of a balanced pair--such as opening and
closing braces--the closing character will be the final delimiter. Otherwise,
the character itself will be both the starting and ending delimiter.

=begin programlisting

    my $quote     = B<qq{>"Ouch", he said.  "That I<hurt>!"B<}>;
    my $reminder  =  B<q^>Don't escape the single quote!B<^>;
    my $complaint =  B<q{>It's too early to be awake.B<}>;

=end programlisting

X<heredocs>
X<strings; heredocs>

When declaring a complex string with a series of embedded escapes is tedious,
use the I<heredoc> syntax to assign multiple lines to a string:

=begin programlisting

    my $blurb =<<'END_BLURB';

    He looked up. "Change is the constant on which they all
    can agree.  We instead, born out of time, remain perfect
    and perfectly self-aware. We only suffer change as we
    pursue it. It is against our nature. We rebel against
    that change. Shall we consider them greater for it?"
    END_BLURB

=end programlisting

The C<< <<'END_BLURB' >> syntax has three parts. The double angle-brackets
introduce the heredoc. The quotes determine whether the heredoc follows single-
or double-quoted behavior. (The default behavior is double-quoted.)
C<END_BLURB> is an arbitrary identifier which the Perl parser uses as the
ending delimiter.

Regardless of the indentation of the heredoc declaration itself, the ending
delimiter must I<start> at the beginning of the line:

=begin programlisting

    sub some_function {
        my $ingredients =<<'END_INGREDIENTS';
        Two eggs
        One cup flour
        Two ounces butter
        One-quarter teaspoon salt
        One cup milk
        One drop vanilla
        Season to taste
    B<END_INGREDIENTS>
    }

=end programlisting

=begin sidebar

If the identifier I<begins> with whitespace, that same whitespace must be
present before the ending delimiter--that is, C<<< <<' END_HEREDOC'>> >>> needs
a leading space before C<END_HEREDOC>. Yet if you indent the identifier, Perl
will I<not> remove equivalent whitespace from the start of each line of the
heredoc. Yes, that's less than ideal.

=end sidebar

Using a string in a non-string context will induce coercion (L<coercion>).

=head2 Unicode and Strings

Z<unicode>
X<Unicode>

I<Unicode> is a system for representing the characters of the world's written
languages. While most English text uses a character set of only 127 characters
(which requires seven bits of storage and fits nicely into eight-bit bytes),
it's naE<iuml>ve to believe that you won't someday need an umlaut.

Perl strings can represent either of two separate but related data types:

X<codepoint>

=over 4

=item Sequences of Unicode characters

Each character has a I<codepoint>, a unique number which identifies it in the
Unicode character set.

=item Sequences of octets

X<octet>

Binary data is a sequence of I<octets>--8 bit numbers, each of which can
represent a number between 0 and 255.

=back

=begin tip Words Matter

Why I<octet> and not I<byte>? Assuming that one character fits in one byte will
cause you no end of Unicode grief. Separate the idea of memory storage from
character representation. Forget that you ever heard of bytes.

=end tip

Unicode strings and binary strings look superficially similar. Each has a
C<length()>. Each supports standard string operations such as concatenation,
splicing, and regular expression processing (L<regex>). Any string which is not
purely binary data is textual data, and thus should be a sequence of Unicode
characters.

However, because of how your operating system represents data on disk or from
users or over the network--as sequences of octets--Perl can't know if the data
you read is an image file or a text document or anything else. By default, Perl
treats all incoming data as sequences of octets. It's up to you to add a
specific meaning to that data.

=head3 Character Encodings

X<encoding>
X<Unicode; encoding>
X<UTF-8>
X<ASCII>
X<Latin-1>

A Unicode string is a sequence of octets which represents a sequence of
characters. A I<Unicode encoding> maps octet sequences to characters. Some
encodings, such as UTF-8, can encode all of the characters in the Unicode
character set. Other encodings represent only a subset of Unicode characters.
For example, ASCII encodes plain English text with no accented characters,
while Latin-1 can represent text in most languages which use the Latin
alphabet.

=begin tip An Evolving Standard

Perl 5.14 supports the Unicode 6.0 standard, 5.16 the 6.1 standard, and 5.18
the 6.2 standard. See U<http://unicode.org/versions/>.

=end tip

To avoid most Unicode problems, always decode to and from the appropriate
encoding at the inputs and outputs of your program.

=head3 Unicode in Your Filehandles

X<C<open>>
X<builtins; C<open>>
X<IO layers>

When you tell Perl that a specific filehandle (L<files>) should handle data
with a specific Unicode encoding, Perl will use an I<IO layer> to convert
between octets and characters. The I<mode> operand of the C<open> builtin
allows you to request an IO layer by name. For example, the C<:utf8> layer
decodes UTF-8 data:

=begin programlisting

    open my $fh, '<:utf8', $textfile;

    my $unicode_string = <$fh>;

=end programlisting

X<C<binmode>>
X<builtins; C<binmode>>

Use C<binmode> to apply an IO layer to an existing filehandle:

=begin programlisting

    binmode $fh, ':utf8';
    my $unicode_string = <$fh>;

    binmode STDOUT, ':utf8';
    say $unicode_string;

=end programlisting

Without the C<utf8> mode, printing certain Unicode strings to a filehandle will
result in a warning (C<Wide character in %s>), because files contain octets,
not Unicode characters.

X<C<utf8::all>>

=begin tip Enable UTF-8 Everywhere

The C<utf8::all> module enables UTF-8 IO layers on all filehandles throughout
your program and enables all sorts of other Unicode features. It's very handy,
but it's no substitute for (eventually) figuring out what your program needs.

=end tip

=head3 Unicode in Your Data

X<C<Encode>>
X<C<decode()>>
X<C<encode()>>

The core module C<Encode> provides a function named C<decode()> to convert a
scalar containing octets to Perl's internal version of Unicode strings. The
corresponding C<encode()> function converts from Perl's internal encoding to
the desired encoding:

=begin programlisting

    my $from_utf8 = decode('utf8', $data);
    my $to_latin1 = encode('iso-8859-1', $string);

=end programlisting

To handle Unicode properly, you must always I<decode> incoming data via a known
encoding and I<encode> outgoing data to a known encoding. Yes, this means you
have to know what kind of data you expect to give and receive, but you should
know this anyway. Being specific will help you avoid all kinds of trouble.

=head3 Unicode in Your Programs

X<pragmas; C<utf8>>
X<C<utf8> pragma>
X<encoding>

You may include Unicode characters in your programs in three ways. The easiest
is to use the C<utf8> pragma (L<pragmas>), which tells the Perl parser to
interpret the rest of the source code file with the UTF-8 encoding. This allows
you to use Unicode characters in strings and identifiers:

=begin programlisting

    use utf8;

    sub E<pound>_to_E<yen> { ... }

    my $yen = E<pound>_to_E<yen>('1000E<pound>');

=end programlisting

To I<write> this code, your text editor must understand UTF-8 and you must save
the file with the appropriate encodingN<Again, any two programs which
communicate with Unicode data must agree on the encoding of that data.>.

X<strings; C<\x{}>>
X<C<\x{}>; escape sequence for character encodings>

Within double-quoted strings, you may use the Unicode escape sequence to
represent character encodings. The syntax C<\x{}> represents a single
character; place the hex form of the character's Unicode numberN<See
U<http://unicode.org/charts/> for an exhaustive list.> within the curly
brackets:

=begin programlisting

    my $escaped_thorn = "\x{00FE}";

=end programlisting

X<C<charnames> pragma>
X<pragmas; C<charnames>>
X<strings; C<\N{}>>
X<C<\N{}>; escape sequence for named character encodings>

Some Unicode characters have names, and these names are often clearer to read
than their numbers even though they're much longer. Use the C<charnames> pragma
to enable them and the C<\N{}> escape to refer to them:

=begin programlisting

    use charnames ':full';
    use Test::More tests => 1;

    my $escaped_thorn = "\x{00FE}";
    my $named_thorn   = "\N{LATIN SMALL LETTER THORN}";

    is $escaped_thorn, $named_thorn,
        'Thorn equivalence check';

=end programlisting

You may use the C<\x{}> and C<\N{}> forms within regular expressions as well as
anywhere else you may legitimately use a string or a character.

=head3 Implicit Conversion

Most Unicode problems in Perl arise from the fact that a string could be either
a sequence of octets or a sequence of characters. Perl allows you to combine
these types through the use of implicit conversions. When these conversions are
wrong, they're rarely I<obviously> wrong and they're often I<spectacularly>
wrong in ways that are difficult to debug.

When Perl concatenates a sequence of octets with a sequence of Unicode
characters, it implicitly decodes the octet sequence using the Latin-1
encoding. The resulting string will contain Unicode characters. When you print
Unicode characters, Perl will encode the string using UTF-8, because Latin-1
cannot represent the entire set of Unicode characters--Latin-1 is a subset of
UTF-8.

The asymmetry between encodings and octets can lead to Unicode strings encoded
as UTF-8 for output and decoded as Latin-1 from input. Worse yet, when the text
contains only English characters with no accents, the bug stays hidden, because
both encodings use the same representation for every character.

=begin programlisting

    my $hello    = "Hello, ";
    my $greeting = $hello . $name;

=end programlisting

If C<$name> contains an English name such as I<Alice> you will never notice any
problem, because the Latin-1 representation is the same as the UTF-8
representation. If C<$name> contains a name such as I<JosE<eacute>>, C<$name>
can contain several possible values:

=over 4

=item *

C<$name> contains four Unicode characters.

=item *

C<$name> contains four Latin-1 octets representing four Unicode characters.

=item *

C<$name> contains I<five> UTF-8 octets representing four Unicode characters.

=back

The string literal has several possible scenarios:

=over 4

=item * It is an ASCII string literal and contains octets.

=begin programlisting

    my $hello = "Hello, ";

=end programlisting

=item * It is a Latin-1 string literal with no explicit encoding and contains
octets.

=begin programlisting

    my $hello = "E<iexcl>Hola, ";

=end programlisting

The string literal contains octets.

=item * It is a non-ASCII string literal with the C<utf8> or C<encoding> pragma
in effect and contains Unicode characters.

=begin programlisting

    use utf8;
    my $hello = "KuirabE<aacute>, ";

=end programlisting

=back

If both C<$hello> and C<$name> are Unicode strings, the concatenation will
produce another Unicode string.

If both strings are octet streams, Perl will concatenate them into a new octet
string. If both values are octets of the same encoding--both Latin-1, for
example, the concatenation will work correctly. If the octets do not share an
encoding--for example, a concatenation appending UTF-8 data to Latin-1
data--then the resulting sequence of octets makes sense in I<neither> encoding.
This could happen if the user entered a name as UTF-8 data and the greeting
were a Latin-1 string literal, but the program decoded neither.

If only one of the values is a Unicode string, Perl will decode the other as
Latin-1 data. If this is not the correct encoding, the resulting Unicode
characters will be wrong. For example, if the user input were UTF-8 data and
the string literal were a Unicode string, the name would be incorrectly decoded
into five Unicode characters to form I<JosE<Atilde>E<copy>> (I<sic>) instead of
I<JosE<eacute>> because the UTF-8 data means something else when decoded as
Latin-1 data.

If your head is spinning, you're not alone. Always decode on input and encode
on output.

X<perl.com>

See C<perldoc perluniintro> for a far more detailed explanation of Unicode,
encodings, and how to manage incoming and outgoing data in a Unicode worldN<For
I<far> more detail about managing Unicode effectively throughout your programs,
see Tom Christiansen's answer to "Why does Modern Perl avoid UTF-8 by default?"
U<http://stackoverflow.com/questions/6162484/why-does-modern-perl-avoid-utf-8-by-default/6163129#6163129>>
and his "Perl Unicode Cookbook" series on Perl.com
U<http://www.perl.com/pub/2012/04/perlunicook-standard-preamble.html>.

=begin sidebar

X<C<unicode_strings>>
X<pragmas; C<feature>>

Perl 5.12 added a feature, C<unicode_strings>, which enables Unicode semantics
for all string operations within its scope. Perl 5.14 improved this feature and
Perl 5.16 completed it. If you work with Unicode in Perl, you need to use at
least Perl 5.14 and, ideally, Perl 5.18.

=end sidebar

=head2 Numbers

X<numbers>
X<integers>
X<floating-point values>

Perl supports numbers as both integers and floating-point values. You may
represent them with scientific notation as well as in binary, octal, and
hexadecimal forms:

=begin programlisting

    my $integer   = 42;
    my $float     = 0.007;
    my $sci_float = 1.02e14;
    my $binary    = B<0b>101010;
    my $octal     = B<0>52;
    my $hex       = B<0x>20;

=end programlisting

X<numbers; representation prefixes>
X<C<0b>>
X<C<0>>
X<C<0x>>

The emboldened characters are the numeric prefixes for binary, octal, and hex
notation respectively. Be aware that a leading zero on an integer I<always>
indicates octal mode.

X<numbers; underscore separator>
X<underscore>

=begin tip When 1.99 + 1.99 is 4

Even though you can write floating-point values explicitly with perfect
accuracy, Perl--like most programming languages--represents them internally in
a binary format. This representation is sometimes imprecise in specific ways;
consult C<perldoc perlnumber> for more details.

=end tip

You may I<not> use commas to separate thousands in numeric literals, lest the
parser interpret the commas as the comma operator. Instead, use underscores
within the number. The parser will treat them as invisible characters. Thus all
of these are equivalent, though the second might be the most readable:

=begin programlisting

    my $billion = 1000000000;
    my $billion = 1_000_000_000;
    my $billion = 10_0_00_00_0_0_0;

=end programlisting

X<C<Scalar::Util>>
X<C<looks_like_number()>>

Because of coercion (L<coercion>), Perl programmers rarely have to worry about
converting data from outside the program to numbers. Perl will treat anything
which looks like a number I<as> a number when evaluated in a numeric context.
In the rare circumstances where I<you> need to know if something looks like a
number without evaluating it in a numeric context, use the C<looks_like_number>
function from the core module C<Scalar::Util>. This function returns a true
value if Perl will consider the given argument numeric.

X<C<Regexp::Common>>

The C<Regexp::Common> module from the CPAN provides several well-tested regular
expressions to identify more specific I<types> of numeric values such as whole
numbers, integers, and floating-point values.

=head2 Undef

X<C<undef>>

Perl's C<undef> value represents an unassigned, undefined, and unknown value.
Declared but undefined scalar variables contain C<undef>:

=begin programlisting

    my $name = undef;   # unnecessary assignment
    my $rank;           # also contains undef

=end programlisting

X<C<undef>; coercions>

C<undef> evaluates to false in boolean a context. Evaluating C<undef> in a
string context--such as interpolating it into a string:

=begin programlisting

    my $undefined;
    my $defined = $undefined . '... and so forth';

=end programlisting

... produces an C<uninitialized value> warning:

=begin screen

    Use of uninitialized value $undefined in
    concatenation (.) or string...

=end screen

X<builtins; C<defined>>

The C<defined> builtin returns a true value if its operand evaluates to a
defined value (that is, anything other than C<undef>):

=begin programlisting

    my $status = 'suffering from a cold';

    say B<defined> $status;  # 1, which is a true value
    say B<defined> undef;    # empty string; a false value

=end programlisting

=head2 The Empty List

X<empty list>
X<C<()>; empty list>

When used on the right-hand side of an assignment, the C<()> construct
represents an empty list. In scalar context, this evaluates to C<undef>. In
list context, it is an empty list. When used on the left-hand side of an
assignment, the C<()> construct imposes list context. Why would you ever do
this? To count the number of elements returned from an expression in list
context without using a temporary variable, use the idiom (L<idioms>):

=begin programlisting

    my $count = B<()> = get_clown_hats();

=end programlisting

Because of the right associativity (L<associativity>) of the assignment
operator, Perl first evaluates the second assignment by calling
C<get_clown_hats()> in list context. This produces a list.

Assignment to the empty list throws away all of the values of the list, but
that assignment takes place in scalar context, which evaluates to the number of
items on the right hand side of the assignment. As a result, C<$count> contains
the number of elements in the list returned from C<get_clown_hats()>.

Sound complicated? It can confuse new programmers, but with practice, you'll
see how Perl's fundamental design features fit together.

=head2 Lists

X<lists>

A list is a comma-separated group of one or more expressions. Lists may occur
verbatim in source code as values:

=begin programlisting

    my @first_fibs = B<(1, 1, 2, 3, 5, 8, 13, 21);>

=end programlisting

... as targets of assignments:

=begin programlisting

    my B<($package, $filename, $line)> = caller();

=end programlisting

... or as lists of expressions:

=begin programlisting

    say B<< name(), ' => ', age() >>;

=end programlisting

Parentheses do not I<create> lists. The comma operator creates lists. Where
present, the parentheses in these examples group expressions to change their
I<precedence> (L<precedence>).

X<operators; range>
X<operators; C<..>>
X<C<..>; range operator>

Use the range operator to create lists of literals in a compact formN<See?
Lists but no parentheses!>:

=begin programlisting

    my @chars = 'a' .. 'z';
    my @count = 13 .. 27;

=end programlisting

X<operators; C<qw()>>
X<C<qw()>; quote words operator>

Use the C<qw()> operator to split a literal string on whitespace to produce a
list of stringsN<< Parentheses, but you could use any delimiter, such as
C<qw!!>. >>:

=begin programlisting

    my @stooges = qw( Larry Curly Moe Shemp Joey Kenny );

=end programlisting

=begin tip No Comment Please

Perl will emit a warning if a C<qw()> contains a comma or the comment character
(C<#>), because not only are such characters rare in a C<qw()>, their presence
is often a mistake.

=end tip

Lists can (and often do) occur as the results of expressions, but these lists
do not appear literally in source code.

Lists and arrays are not interchangeable in Perl. You may store a list in an
array and you may coerce an array to a list, but lists and arrays are separate
concepts. Lists are values. Arrays are containers. For example, indexing into a
list always occurs in list context. Indexing into an array can occur in scalar
context (for a single element) or list context (for a slice):

=begin programlisting

    # don't worry about the details right now
    sub context
    {
        my $context = wantarray();

        say defined $context
             ? $context
                 ? 'list'
                 : 'scalar'
             : 'void';
        return 0;
    }

    my @list_slice  = (1, 2, 3)[context()];
    my @array_slice = @list_slice[context()];
    my $array_index = $array_slice[context()];

    say context(); # list context
    context();     # void context

=end programlisting
