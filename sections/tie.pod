=head1 Tie

Z<tie>

Where overloading (L<overloading>) allows you to customize the behavior of
classes and objects for specific types of coercion, a mechanism called I<tying>
allows you to customize the behavior of primitive variables (scalars, arrays,
hashes, and filehandles). Any operation you might perform on a tied variable
translates to a specific method call on an object.

X<builtins; C<tie>>
X<C<Tie::File>>

The C<tie> builtin originally allowed you to use disk space instead of RAM for
hashes and arrays, so that Perl could use data larger than available memory.
The core module C<Tie::File> allows you to do this, in effect treating files as
if they were arrays.

X<C<Tie::StdScalar>>
X<C<Tie::StdArray>>
X<C<Tie::StdHash>>

The class to which you C<tie> a variable must conform to a defined interface
for a specific data type. Read C<perldoc perltie> for an overview, then see the
core modules C<Tie::StdScalar>, C<Tie::StdArray>, and C<Tie::StdHash> for
specific details. Start by inheriting from one of those classes, then override
any specific methods you need to modify.

=begin tip When Class and Package Names Collide

If C<tie> weren't confusing enough, C<Tie::Scalar>, C<Tie::Array>, and
C<Tie::Hash> define the necessary interfaces to tie scalars, arrays, and
hashes, but C<Tie::StdScalar>, C<Tie::StdArray>, and C<Tie::StdHash> provide
the default implementations.

=end tip

=head2 Tying Variables

To tie a variable:

=begin programlisting

    use Tie::File;
    tie my @file, 'Tie::File', @args;

=end programlisting

The first argument is the variable to tie. The second is the name of the class
into which to tie it. C<@args> is an optional list of arguments required for
the tying function. In the case of C<Tie::File>, C<@args> should contain a
valid filename.

X<builtins; C<tie>>
X<builtins; C<tied>>

Tying functions resemble constructors: C<TIESCALAR>, C<TIEARRAY()>,
C<TIEHASH()>, or C<TIEHANDLE()> for scalars, arrays, hashes, and filehandles
respectively. Each function returns a new object which represents the tied
variable. Both C<tie> and C<tied> return this object, though most people use
C<tied> in a boolean context.

=head2 Implementing Tied Variables

To implement the class of a tied variable, inherit from a core module such as
C<Tie::StdScalar>N<C<Tie::StdScalar> lacks its own F<.pm> file, so write C<use
Tie::Scalar;>.>, then override the specific methods for the operations you want
to change.  In the case of a tied scalar, these are likely C<FETCH> and
C<STORE>, possibly C<TIESCALAR()>, and probably not C<DESTROY()>.

Here's a class which logs all reads from and writes to a scalar:

=begin programlisting

    package Tie::Scalar::Logged
    {
        use Modern::Perl;

        use Tie::Scalar;
        use parent -norequire => 'Tie::StdScalar';

        sub STORE
        {
            my ($self, $value) = @_;
            Logger->log("Storing <$value> (was [$$self])", 1);
            $$self = $value;
        }

        sub FETCH
        {
            my $self = shift;
            Logger->log("Retrieving <$$self>", 1);
            return $$self;
        }
    }

=end programlisting

Assume that the C<Logger> class method C<log()> takes a string and the number
of frames up the call stack of which to report the location.

Within the C<STORE()> and C<FETCH()> methods, C<$self> works as a blessed
scalar. Assigning to that scalar reference changes the value of the scalar and
reading from it returns its value.

Similarly, the methods of C<Tie::StdArray> and C<Tie::StdHash> act on blessed
array and hash references, respectively. Again, C<perldoc perltie> explains the
methods tied variables support, such as reading or writing multiple values at
once.

=begin tip Isn't C<tie> Fun?

The C<-norequire> option prevents the C<parent> pragma from attempting to load
a file for C<Tie::StdScalar>, as that module is part of the file
F<Tie/Scalar.pm>. This is messy but necessary.

=end tip

=head2 When to use Tied Variables

Tied variables seem like fun opportunities for cleverness, but they can produce
confusing interfaces. Unless you have a very good reason for making objects
behave as if they were builtin data types, avoid creating your own ties.
C<tie>d variables are often much slower than builtin data types.

With that said, tied variables can help you debug tricky code (use the logged
scalar to help you understand I<where> a value changes) or to make certain
impossible things possible (access large files without running out of memory).
Tied variables are less useful as the primary interfaces to objects; it's often
too difficult and constraining to try to fit your whole interface to that
supported by C<tie()>.

A final word of warning is a sad indictment of lazy programming: a lot of code
goes out of its way to I<prevent> use of tied variables, often by accident.
This is unfortunate, but library code is sometimes fast and lazy with what it
expects, and you can't always fix it.
