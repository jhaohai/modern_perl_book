=head1 The UNIVERSAL Package

Z<universal>

X<C<UNIVERSAL>>

Perl's builtin C<UNIVERSAL> package is the ancestor of all other packages--in
the object-oriented sense (L<moose>). C<UNIVERSAL> provides a few methods for
its children to use, inherit, or override.

=head2 The VERSION() Method

X<C<UNIVERSAL::VERSION>>
X<C<VERSION()>>

The C<VERSION()> method returns the value of the C<$VERSION> variable of the
invoking package or class. If you provide a version number as an optional
parameter, the method will throw an exception if the queried C<$VERSION> is not
equal to or greater than the parameter.

Given a C<HowlerMonkey> module of version C<1.23>:

=begin programlisting

    my $hm = HowlerMonkey->new;

    say HowlerMonkey->VERSION;    # prints 1.23
    say $hm->VERSION;             # prints 1.23
    say $hm->VERSION( 0.0  );     # prints 1.23
    say $hm->VERSION( 1.23 );     # prints 1.23
    say $hm->VERSION( 2.0  );     # exception!

=end programlisting

There's little reason to override C<VERSION()>.

=head2 The DOES() Method

X<C<UNIVERSAL::DOES>>
X<C<DOES()>>

The C<DOES()> method supports the use of roles (L<roles>) in programs. Pass it
an invocant and the name of a role, and the method will return true if the
appropriate class somehow does that role--whether through inheritance,
delegation, composition, role application, or any other mechanism.

The default implementation of C<DOES()> falls back to C<isa()>, because
inheritance is one mechanism by which a class may do a role. Given a
C<Cappuchin>:

=begin programlisting

    say Cappuchin->DOES( 'Monkey'       );  # prints 1
    say $cappy->DOES(    'Monkey'       );  # prints 1
    say Cappuchin->DOES( 'Invertebrate' );  # prints 0

=end programlisting

Override C<DOES()> if you manually consume a role or otherwise somehow provide
allomorphic equivalence.

=head2 The can() Method

X<C<UNIVERSAL::can>>
X<C<can()>>

The C<can()> method takes a string containing the name of a method. It returns
a reference to the function which implements that method, if it exists.
Otherwise, it returns a false value. You may call this on a class, an object,
or the name of a package. In the latter case, it returns a reference to a
function, not a methodN<... not that you can tell the difference, given only a
reference.>.

Given a class named C<SpiderMonkey> with a method named C<screech>, get a
reference to the method with:

=begin programlisting

    if (my $meth = SpiderMonkey->can( 'screech' )) {...}

=end programlisting

This technique leads to the pattern of checking for a method's existence before
dispatching to it:

=begin programlisting

    if (my $meth = $sm->can( 'screech' )
    {
        # method; not a function
        $sm->$meth();
    }

=end programlisting

X<builtins; C<require>>
X<CPAN; C<UNIVERSAL::require>>

Use C<can()> to test if a package implements a specific function or method:

=begin programlisting

    use Class::Load;

    die "Couldn't load $module!"
        unless load_class( $module );

    if (my $register = $module->can( 'register' ))
    {
        # function; not a method
        $register->();
    }

=end programlisting

=begin tip C<Module::Pluggable>

X<CPAN; C<Class::Load>>
X<CPAN; C<Module::Pluggable>>

The CPAN module C<Class::Load> simplifies the work of loading classes by name.
Similarly, C<Module::Pluggable> takes most of the work out of building and
managing plugin systems. Get to know both distributions.

=end tip

=head2 The isa() Method

X<C<UNIVERSAL::isa>>
X<C<isa()>>
X<C<SCALAR>>
X<C<ARRAY>>
X<C<HASH>>
X<C<Regexp>>
X<C<IO>>
X<C<CODE>>

The C<isa()> method takes a string containing the name of a class or the name
of a core type (C<SCALAR>, C<ARRAY>, C<HASH>, C<Regexp>, C<IO>, and C<CODE>).
Call it as a class method or an instance method on an object. C<isa()> returns
a true value if its invocant is or derives from the named class, or if the
invocant is a blessed reference to the given type.

Given an object C<$pepper> (a hash reference blessed into the C<Monkey> class,
which inherits from the C<Mammal> class):

=begin programlisting

    say $pepper->isa( 'Monkey'  );  # prints 1
    say $pepper->isa( 'Mammal'  );  # prints 1
    say $pepper->isa( 'HASH'    );  # prints 1
    say Monkey->isa(  'Mammal'  );  # prints 1

    say $pepper->isa( 'Dolphin' );  # prints 0
    say $pepper->isa( 'ARRAY'   );  # prints 0
    say Monkey->isa(  'HASH'    );  # prints 0

=end programlisting

X<CPAN; C<Test::MockObject>>
X<CPAN; C<Test::MockModule>>

Any class may override C<isa()>. This can be useful when working with mock
objects (see C<Test::MockObject> and C<Test::MockModule> on the CPAN) or with
code that does not use roles (L<roles>). Be aware that any class which I<does>
override C<isa()> generally has a good reason for doing so.

=begin tip Does a Class Exist?

While both C<UNIVERSAL::isa()> and C<UNIVERSAL::can()> are methods
(L<method_sub_equivalence>), you may I<safely> use the latter as a function
solely to determine whether a class exists in Perl. If C<UNIVERSAL::can(
$classname, 'can' )> returns a true value, someone somewhere has defined a
class of the name C<$classname>. That class may not be usable, but it does
exist.

=end tip

=head2 Extending UNIVERSAL

It's tempting to store other methods in C<UNIVERSAL> to make it available to
all other classes and objects in Perl. Avoid this temptation; this global
behavior can have subtle side effects, especially in code you didn't write and
don't maintain, because it is unconstrained.

X<CPAN; C<UNIVERSAL::ref>>
X<CPAN; C<UNIVERSAL::isa>>
X<CPAN; C<UNIVERSAL::can>>
X<CPAN; C<Perl::Critic>>

With that said, occasional abuse of C<UNIVERSAL> for I<debugging> purposes and
to fix improper default behavior may be excusable.  For example, Joshua ben
Jore's C<UNIVERSAL::ref> distribution makes the nearly-useless C<ref()>
operator usable. The C<UNIVERSAL::can> and C<UNIVERSAL::isa> distributions can
help you debug anti-polymorphism bugs (L<method_sub_equivalence>).
C<Perl::Critic> can detect those and other problems.

Outside of very carefully controlled code and very specific, very pragmatic
situations, there's no reason to put code in C<UNIVERSAL> directly. There are
almost always much better design alternatives.
