=head1 Operator Characteristics

Z<operator_characteristics>
X<operators; characteristics>

Every operator possesses several important characteristics which govern its
behavior: the number of operands on which it operates, its relationship to
other operators, the contexts it enforces, and the syntax it provides.

C<perldoc perlop> and C<perldoc perlsyn> provide voluminous information about
Perl's operators, but the documentation assumes you're already familiar with a
few essential computer science concepts. These ideas sound complicated, but
they use complex names for ideas you already understand, even if you've never
thought about them. If you can do elementary math in your head, you'll do fine.

=head2 Precedence

Z<precedence>
X<precedence>

The I<precedence> of an operator governs when Perl should evaluate it in an
expression. Evaluation order proceeds from highest to lowest precedence.
Remember basic math? Multiply and divide before you add and subtract. That's
precedence. Because the precedence of multiplication is higher than the
precedence of addition, in Perl C<7 + 7 * 10> evaluates to C<77>, not C<140>.

To force the evaluation of some operators before others, group their
subexpressions in parentheses. In C<(7 + 7) * 10>, grouping the addition into a
single unit forces its evaluation before the multiplication. The result is
C<140>.

C<perldoc perlop> contains a table of precedence. Skim it a few times, but
don't bother memorizing it (almost no one does). Spend your time simplifying
your code where you can and then adding clarifying parentheses where you need
them.

In cases where two operators have the same precedence, other factors such as
associativity (L<associativity>) and fixity (L<fixity>) break the tie.

=head2 Associativity

Z<associativity>
X<associativity>
X<associativity; left>
X<left associativity>
X<associativity; right>
X<right associativity>

The I<associativity> of an operator governs whether it evaluates from left to
right or right to left. Addition is left associative, such that C<2 + 3 + 4>
evaluates C<2 + 3> first, then adds C<4> to the result. Exponentiation is right
associative, such that C<2 ** 3 ** 4> evaluates C<3 ** 4> first, then raises
C<2> to the 81st power. As usual, grouping with parentheses will let you change
the order of evaluation.

If you memorize only the precedence and associativity of the common
mathematical operators, you'll be fine. Simplify your code and you won't have
to memorize other associativities.

=begin sidebar

X<C<B::Deparse>>
X<precedence; disambiguation>
X<associativity; disambiguation>

The core C<B::Deparse> module is an invaluable debugging tool. Run C<perl
-MO=Deparse,-p> on a snippet of code to see exactly how Perl handles operator
precedence and associativity. The C<-p> flag adds extra grouping parentheses
which often clarify evaluation order.

Beware that Perl's optimizer will simplify mathematical operations using
constant values. To work around this, use named variables instead, as in C<$x
** $y ** $z>.

=end sidebar

=head2 Arity

Z<arity>

X<arity>
X<operators; arity>
X<nullary>
X<unary>
X<binary>
X<trinary>
X<listary>

The I<arity> of an operator is the number of operands on which it operates.  A
I<nullary> operator operates on zero operands. A I<unary> operator operates on
one operand. A I<binary> operator operates on two operands. A I<trinary>
operator operates on three operands. A I<listary> operator operates on a list
of operands.

The arithmetic operators are binary operators and are usually left associative.
C<2 + 3 - 4> evaluates C<2 + 3> first; addition and subtraction have the same
precedence, but they're left associative and binary, so the proper evaluation
order applies the leftmost operator (C<+>) to the leftmost two operands (C<2>
and C<3>) with the leftmost operator (C<+>), then applies the rightmost
operator (C<->) to the result of the first operation and the rightmost operand
(C<4>).

Perl novices often find confusion between the interaction of listary
operators--especially function calls--and nested expressions. Where parentheses
usually help, beware of the parsing complexity of:

=begin programlisting

    # probably buggy code
    say ( 1 + 2 + 3 ) * 4;

=end programlisting

... which prints the value C<6> and (probably) evaluates as a whole to C<4>
(the return value of C<say> multiplied by C<4>). Perl's parser happily
interprets the parentheses as postcircumfix (L<fixity>) operators denoting the
arguments to C<say>, not circumfix parentheses grouping an expression to change
precedence.

=head2 Fixity

Z<fixity>
X<fixity>
X<operators; fixity>
X<infix>
X<fixity; infix>
X<prefix>
X<fixity; prefix>
X<postfix>
X<fixity; postfix>
X<circumfix>
X<fixity; circumfix>
X<postcircumfix>
X<fixity; postcircumfix>

An operator's I<fixity>N<Don't memorize all of these words. Just remember what
they mean.> is its position relative to its operands:

X<C<.>; infix operator>
X<C<.=>; infix operator>
X<C<..>; infix operator>
X<C<...>; infix operator>
X<C<=~>; infix operator>
X<C<!~>; infix operator>
X<C<|>; infix operator>
X<C<||>; infix operator>
X<C<//>; infix operator>
X<C<|=>; infix operator>
X<C<||=>; infix operator>
X<C<//=>; infix operator>

=over 4

=item * I<Infix> operators appear between their operands. Most mathematical
operators are infix operators, such as the multiplication operator in C<$length
* $width>.

X<C<\>; prefix operator>
X<C<~>; prefix operator>
X<C<++>; prefix operator>
X<C<-->; prefix operator>
X<C<+>; prefix operator>
X<C<->; prefix operator>
X<C<!>; prefix operator>
X<C<!!>; prefix operator>

=item * I<Prefix> operators precede their operands. I<Postfix> operators follow
their operands. These operators tend to be unary, such as mathematic negation
(C<-$x>), boolean negation (C<!$y>), and postfix increment (C<$z++>).

X<C<()>; circumfix operator>
X<C<{}>; circumfix operator>
X<C<[]>; circumfix operator>
X<C<//>; circumfix operator>
X<C<``>; circumfix operator>
X<C<''>; circumfix operator>
X<C<"">; circumfix operator>

=item * I<Circumfix> operators surround their operands, as with the anonymous
hash constructor (C<{ ... }>) and quoting operators (C<qq[ ... ]>).

X<C<()>; postcircumfix operator>
X<C<{}>; postcircumfix operator>
X<C<[]>; postcircumfix operator>

=item * I<Postcircumfix> operators follow certain operands and surround others,
as seen in hash and array element access (C<$hash{$x}> and C<$array[$y]>).

=back
