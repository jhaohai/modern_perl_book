=head1 Attributes

Z<attributes>

Named entities in Perl--variables and functions--can have additional metadata
attached. This metadata takes the form of I<attributes>, arbitrary names and
values used with certain types of metaprogramming (L<code_generation>).

Attribute declaration syntax is awkward, and using attributes effectively is
more art than science. Most programs never use them, but when used well they
offer clarity and maintenance benefits.

A simple attribute is a colon-preceded identifier attached to a declaration:

=begin programlisting

    my $fortress      B<:hidden>;

    sub erupt_volcano B<:ScienceProject> { ... }

=end programlisting

When Perl parses these declarations, it invokes attribute handlers named
C<hidden> and C<ScienceProject>, if they exist for the appropriate types
(scalars and functions, respectively). These handlers can do I<anything>. If
the appropriate handlers do not exist, Perl will throw a compile-time
exception.

X<CPAN; C<Test::Class>>
X<Catalyst>
X<CPAN; C<Catalyst>>

Attributes may include a list of parameters. Perl treats these parameters as
lists of constant strings. The C<Test::Class> module from the CPAN uses such
parametric arguments to good effectN<See the Catalyst web framework for
another, different, example.>:

=begin programlisting

    sub setup_tests          :Test(setup)    { ... }
    sub test_monkey_creation :Test(10)       { ... }
    sub shutdown_tests       :Test(teardown) { ... }

=end programlisting

The C<Test> attribute identifies methods which include test assertions and
optionally identifies the number of assertions the method intends to run.
While introspection (L<reflection>) of these classes could discover the
appropriate test methods, given well-designed solid heuristics, the C<:Test>
attribute is unambiguous. C<Test::Class> provides attribute handlers which keep
track of these methods. When the class has finished parsing, C<Test::Class> can
loop through the list of test methods and run them.

The C<setup> and C<teardown> parameters allow test classes to define their own
support methods without worrying about conflicts with other such methods in
other classes. This separates the idea of what this class must do from how
other classes do their work. Otherwise a test class might have only one method
named C<setup> and one named C<teardown> and would have to do everything there,
then call the parent methods, and so on.

=head2 Drawbacks of Attributes

X<pragmas; C<attributes>>
X<C<attributes> pragma>
X<CPAN; C<Attribute::Handlers>>
X<CPAN; C<Attribute::Lexical>>

Attributes have their drawbacks. The canonical pragma for working with
attributes (the C<attributes> pragma) has listed its interface as experimental
for many years, and for good reason. Damian Conway's core module
C<Attribute::Handlers> is much easier to use, and Andrew Main's
C<Attribute::Lexical> is a newer approach. Prefer either to C<attributes>
whenever possible.

X<CPAN; C<Memoize>>

The worst feature of attributes is that they make it easy to warp the syntax of
Perl in unpredictable ways. It's not always easy to predict what code with
attributes will do. Good documentation helps, but if an innocent-looking
declaration on a lexical variable stores a reference to that variable
somewhere, your expectations of its lifespan may be wrong. Likewise, a handler
may wrap a function in another function and replace it in the symbol table
without your knowledge--consider a C<:memoize> attribute which automatically
invokes the core C<Memoize> module.

Attributes I<can> help you to solve difficult problems or to make an API much
easier to use. When used properly, they're powerful--but most programs never
need them.
