=head1 Pragmas

Z<pragmas>

X<pragmas>
X<modules; pragmas>

Most Perl modules which provide new functions or define classes (L<moose>).
Others, such as C<strict> or C<warnings>, influence the behavior of the
language itself. This second class of module is a I<pragma>. By convention,
pragmas have lower-case names to differentiate them from other modules.

=head2 Pragmas and Scope

X<pragmas; scope>

Pragmas work by exporting specific behavior or information into the lexical
scopes of their callers. You've seen how declaring a lexical variable makes a
symbol name available within a scope. Using a pragma makes its behavior
effective within a scope as well:

=begin programlisting

    {
        # $lexical B<not> visible; strict B<not> in effect
        {
            use strict;
            my $lexical = 'available here';
            # $lexical B<is> visible; strict B<is> in effect
        }
        # $lexical again invisible; strict B<not> in effect
    }

=end programlisting

Just as lexical declarations affect inner scopes, pragmas maintain their
effects within inner scopes:

=begin programlisting

    # file scope
    use strict;

    {
        # inner scope, but strict still in effect
        my $inner = 'another lexical';
    }

=end programlisting

=head2 Using Pragmas

X<pragmas; enabling>

C<use> a pragma as you would any other module. Pragmas take arguments, such as
a minimum version number to use or a list of arguments to change the pragma's
behavior:

=begin programlisting

    # require variable declarations, prohibit barewords
    use strict qw( subs vars );

    # rely on the semantics of the 2012 book
    use Modern::Perl '2012';

=end programlisting

X<pragmas; disabling>
X<builtins; C<no>>

Sometimes you need to I<disable> all or part of those effects within a further
nested lexical scope. The C<no> builtin performs an unimport (L<importing>),
which undoes the effects of a well-behaved pragma. For example, to disable the
protection of C<strict> when you need to do something symbolic:

=begin programlisting

    use Modern::Perl; # or use strict;

    {
        no strict 'refs';
        # manipulate the symbol table here
    }

=end programlisting

=head2 Useful Pragmas

X<pragmas; useful core pragmas>

Perl includes several useful core pragmas.

X<pragmas; C<strict>>

=over 4

=item * the C<strict> pragma enables compiler checking of symbolic references,
bareword use, and variable declaration.

X<pragmas; C<warnings>>

=item * the C<warnings> pragma enables optional warnings for deprecated,
unintended, and awkward behaviors.

X<pragmas; C<utf8>>

=item * the C<utf8> pragma tells the parser to use the UTF-8 encoding to
understand the source code of the current file.

X<pragmas; C<autodie>>

=item * the C<autodie> pragma enables automatic error checking of system calls
and builtins.

X<pragmas; C<constant>>

=item * the C<constant> pragma allows you to create compile-time constant
values (though see the CPAN's C<Const::Fast> for an alternative).

X<pragmas; C<vars>>

=item * the C<vars> pragma allows you to declare package global variables, such
as C<$VERSION> or C<@ISA> (L<blessed_references>).

X<pragmas; C<feature>>

=item * the C<feature> pragma allows you to enable and disable newer features
of Perl individually. Where C<use 5.14;> enables all of the Perl 5.14 features
and the C<strict> pragma, C<use feature ':5.14';> does the same.  This pragma
is more useful to I<disable> individual features in a lexical scope.

X<pragmas; C<less>>

=item * the C<less> pragma demonstrates how to write a pragma.

=back

X<magic variables; C<$^H>>
X<pragmas; writing>

As you might suspect from C<less>, you can write your own lexical pragmas in
pure Perl. C<perldoc perlpragma> explains how to do so, while the explanation
of C<$^H> in C<perldoc perlvar> explains how the feature works.

The CPAN has begun to gather non-core pragmas:

X<CPAN; C<autobox>>
X<CPAN; C<perl5i>>
X<CPAN; C<autovivification>>
X<CPAN; C<indirect>>

=over 4

=item * C<autovivification> disables autovivification (L<autovivification>)

=item * C<indirect> prevents the use of indirect invocation
(L<indirect_objects>)

=item * C<autobox> enables object-like behavior for Perl's core types
(scalars, references, arrays, and hashes).

=item * C<perl5i> combines and enables many experimental language extensions
into a coherent whole.

=back

These tools are not widely used yet, but they have their champions.
C<autovivification> and C<indirect> can help you write more correct code.
C<autobox> and C<perl5i> are experiments with what Perl might one day become;
they're worth playing with in small projects.
