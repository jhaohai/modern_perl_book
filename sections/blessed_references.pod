=head1 Blessed References

Z<blessed_references>

Perl's core object system is deliberately minimal. It has only three rules:

=over 4

=item * A class is a package.

=item * A method is a function.

=item * A (blessed) reference is an object.

=back

You can build anything else out of those three rules. This minimalism can be
impractical for larger projects--in particular, the possibilities for greater
abstraction through metaprogramming (L<code_generation>) are awkward and
limited. Moose (L<moose>) is a better choice for modern programs larger than a
couple of hundred lines, although lots of legacy code still uses Perl's default
OO.

X<OO; C<bless>>
X<builtins; C<bless>>

You've seen the first two rules already. The C<bless> builtin associates the
name of a class with a reference. That reference is now a valid invocant, and
Perl will perform method dispatch on it, using the associated class.

X<OO; constructors>
X<OO; class methods>
X<methods; class>

A constructor is a method which creates and blesses a reference. By convention,
constructors have the name C<new()>, but this is not a requirement.
Constructors are also almost always I<class methods>.

C<bless> takes two operands, a reference and a class name, and evaluates to the
reference. The reference may be any valid reference, empty or not. The class
does not have to exist yet. You may even use C<bless> outside of a constructor
or a classN<... but you're violating encapsulation to expose the details of
object construction outside of a constructor.>. A constructor can be as simple
as:

=begin programlisting

    sub new
    {
        my $class = shift;
        bless {}, $class;
    }

=end programlisting

By design, this constructor receives the class name as the method's invocant.
You may also hard-code the name of a class, at the expense of flexibility.  A
parametric constructor allows reuse through inheritance, delegation, or
exporting.

X<OO; instance data>

The type of reference used is relevant only to how the object stores its own
I<instance data>. It has no other effect on the resulting object. Hash
references are most common, but you can bless any type of reference:

=begin programlisting

    my $array_obj  = bless [],          $class;
    my $scalar_obj = bless \$scalar,    $class;
    my $func_obj   = bless \&some_func, $class;

=end programlisting

Moose classes define object attributes declaratively, but Perl's default OO is
lax. A class representing basketball players which stores jersey number and
position might use a constructor like:

=begin programlisting

    package Player
    {
        sub new
        {
            my ($class, %attrs) = @_;
            bless \%attrs, $class;
        }
    }

=end programlisting

... and create players with:

=begin programlisting

    my $joel   = Player->new( number => 10,
                            position => 'center' );

    my $damian = Player->new( number  => 0,
                             position => 'guard' );

=end programlisting

The class's methods can access object attributes as hash elements directly:

=begin programlisting

    sub format
    {
        my $self = shift;
        return '#'       . $self->{number}
             . ' plays ' . $self->{position};
    }

=end programlisting

... but so can any other code, so any change to the object's internal
representation may break other code. Accessor methods are safer:

=begin programlisting

    sub number   { return shift->{number}   }
    sub position { return shift->{position} }

=end programlisting

... and now you're starting to write yourself what Moose gives you for free.
Better yet, Moose encourages people to use accessors instead of direct access
by hiding the accessor generation code. Goodbye, temptation.

=head2 Method Lookup and Inheritance

X<method dispatch>
X<OO; methods>

Given a blessed reference, a method call of the form:

=begin programlisting

    my $number = $joel->number;

=end programlisting

... looks up the name of the class associated with the blessed reference
C<$joel>--in this case, C<Player>. Next, Perl looks for a functionN<Remember
that Perl makes no distinction between functions in a namespace and methods.>
named C<number()> in C<Player>. If no such function exists and if C<Player>
extends a parent class, Perl looks in the parent class (and so on and so on)
until it finds a C<number()>. If Perl finds C<number()>, it calls that method
with C<$joel> as an invocant.

=begin tip Keeping Namespaces Clean

X<CPAN; C<namespace::autoclean>>

The C<namespace::autoclean> CPAN module can help avoid unintentional collisions between imported functions and methods.

=end tip

X<C<@ISA>>
X<OO; C<@ISA>>

Moose provides C<extends> to track inheritance relationships, but Perl uses a
package global variable named C<@ISA>. The method dispatcher looks in each
class's C<@ISA> to find the names of its parent classes.  If C<InjuredPlayer>
extends C<Player>, you might write:

=begin programlisting

    package InjuredPlayer
    {
        @InjuredPlayer::ISA = 'Player';
    }

=end programlisting

X<C<parent> pragma>
X<pragmas; C<parent>>

The C<parent> pragma (L<pragmas>) is cleanerN<Older code may use the C<base>
pragma, but C<parent> superseded C<base> in Perl 5.10.>:

=begin programlisting

    package InjuredPlayer
    {
        use parent 'Player';
    }

=end programlisting

Moose has its own metamodel which stores extended inheritance information. This
allows Moose to provide additional metaprogramming opportunities.

X<multiple inheritance>
X<OO; inheritance>

You may inherit from multiple parent classes:

=begin programlisting

    package InjuredPlayer;
    {
        use parent qw( Player Hospital::Patient );
    }

=end programlisting

... though the caveats about multiple inheritance and method dispatch
complexity apply. Consider instead roles (L<roles>) or Moose method modifiers.

=head2 AUTOLOAD

X<C<AUTOLOAD>>
X<OO; C<AUTOLOAD>>
X<methods; C<AUTOLOAD>>

If there is no applicable method in the invocant's class or any of its
superclasses, Perl will next look for an C<AUTOLOAD()> function (L<autoload>)
in every class according to the selected method resolution order. Perl will
invoke any C<AUTOLOAD()> it finds to provide or decline the desired method.

C<AUTOLOAD()> makes multiple inheritance much more difficult to understand.

=head2 Method Overriding and SUPER

As with Moose, you may override methods in basic Perl OO. Unlike Moose, Perl
provides no mechanism for indicating your I<intent> to override a parent's
method. Worse yet, any function you predeclare, declare, or import into the
child class may override a method in the parent class by having the same name.
Even if you forget to use the C<override> system of Moose, at least it exists.
Basic Perl OO offers no such protection.

X<builtins; C<SUPER::>>

To override a method in a child class, declare a method with the same name as
the method in the parent. Within an overridden method, call the parent method
with the C<SUPER::> dispatch hint:

=begin programlisting

    sub overridden
    {
        my $self = shift;
        warn 'Called overridden() in child!';
        return $self->SUPER::overridden( @_ );
    }

=end programlisting

The C<SUPER::> prefix to the method name tells the method dispatcher to
dispatch to an overridden method of the appropriate name. You can provide your
own arguments to the overridden method, but most code reuses C<@_>. Be careful
to C<shift> off the invocant if you do.

=begin tip The Brokenness of C<SUPER::>

X<CPAN; C<SUPER>>

C<SUPER::> has a confusing misfeature: it dispatches to the parent of the
package into which the overridden method was I<compiled>. If you've imported
this method from another package, Perl will happily dispatch to the I<wrong>
parent. The desire for backwards compatibility has kept this misfeature in
place. The C<SUPER> module from the CPAN offers a workaround. Moose's
C<super()> does not suffer the same problem.

=end tip

=head2 Strategies for Coping with Blessed References

Blessed references may seem minimal and tricky and confusing. They are. Moose
is much easier to use, so use it whenever possible. If you do find yourself
maintaining code which uses blessed references, or if you can't convince your
team to use Moose in full yet, you can work around some of the problems of
blessed references with discipline.

X<C<Class::Accessor>>
X<CPAN; C<Role::Tiny>>

=over 4

=item * Do not mix functions and methods in the same class.

=item * Use a single F<.pm> file for each class, unless the class is a small,
self-contained helper used from a single place.

=item * Follow standards of vanilla Perl OO, such as naming constructors
C<new()> and using C<$self> as the invocant name in your documentation.

=item * Use accessor methods pervasively, even within methods in your class.  A
module such as C<Class::Accessor> helps to avoid repetitive boilerplate.

=item * Avoid C<AUTOLOAD()> where possible. If you I<must> use it, use function
forward declarations (L<functions>) to avoid ambiguity.

=item * Expect that someone, somewhere will eventually need to subclass (or
delegate to or reimplement the interface of) your classes. Make it easier for
them by not assuming details of the internals of your code, by using the
two-argument form of C<bless>, and by breaking your classes into the smallest
responsible units of code.

=item * Use helper modules such as C<Role::Tiny> to allow better use and reuse.

=back
