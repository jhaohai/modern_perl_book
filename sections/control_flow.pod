=head1 Control Flow

Z<control_flow>

X<control flow>

Perl's basic I<control flow> is straightforward. Program execution starts at
the beginning (the first line of the file executed) and continues to the end:

=begin programlisting

    say 'At start';
    say 'In middle';
    say 'At end';

=end programlisting

X<control flow directives>

Perl's I<control flow directives> change the order of execution--that is, what
happens next in the program.

=head2 Branching Directives

X<control flow directives; C<if>>

The C<if> directive performs the associated action only when its conditional
expression evaluates to a I<true> value:

=begin programlisting

    say 'Hello, Bob!' if $name eq 'Bob';

=end programlisting

This postfix form is useful for simple expressions. Its block form groups
multiple expressions into a unit which evaluates to a single boolean value:

=begin programlisting

    if ($name eq 'Bob')
    {
        say 'Hello, Bob!';
        found_bob();
    }

=end programlisting

While the block form requires parentheses around its condition, the postfix
form does not.

The conditional expression may consist of multiple subexpressions, as long as
it evaluates to something which can be coerced to a boolean value:

=begin programlisting

    if ($name eq 'Bob' && not greeted_bob())
    {
        say 'Hello, Bob!';
        found_bob();
    }

=end programlisting

In the postfix form, adding parentheses can clarify the intent of the code at
the expense of visual cleanliness:

=begin programlisting

    greet_bob() if ($name eq 'Bob' && not greeted_bob());

=end programlisting

X<control flow directives; C<unless>>

The C<unless> directive is the negated form of C<if>. Perl will perform the
action when the conditional expression evaluates to a I<false> value:

=begin programlisting

    say "You're not Bob!" unless $name eq 'Bob';

=end programlisting

Like C<if>, C<unless> also has a block form, though many programmers avoid it
due to its potential for confusion:

=begin programlisting

    unless (is_leap_year() and is_full_moon())
    {
        frolic();
        gambol();
    }

=end programlisting

C<unless> works very well for postfix conditionals, especially parameter
validation in functions (L<postfix_parameter_validation>):

=begin programlisting

    sub frolic
    {
        # do nothing without parameters
        return unless @_;

        for my $chant (@_) { ... }
    }

=end programlisting

X<control flow directives; C<else>>

The block forms of C<if> and C<unless> both support the C<else> directive,
which provides code to run when the conditional expression does not evaluate to
the appropriate true or false value:

=begin programlisting

    if ($name eq 'Bob')
    {
        say 'Hi, Bob!';
        greet_user();
    }
    else
    {
        say "I don't know you.";
        shun_user();
    }

=end programlisting

C<else> blocks allow you to rewrite C<if> and C<unless> conditionals in terms
of each other:

=begin programlisting

    unless ($name eq 'Bob')
    {
        say "I don't know you.";
        shun_user();
    }
    else
    {
        say 'Hi, Bob!';
        greet_user();
    }

=end programlisting

However, the implied double negative of using C<unless> with an C<else> block
can be confusing. This example may be the only place you ever see it.

Just as Perl provides both C<if> and C<unless> to allow you to phrase your
conditionals in the most readable way, Perl has both positive and negative
conditional operators:

=begin programlisting

    if ($name B<ne> 'Bob')
    {
        say "I don't know you.";
        shun_user();
    }
    else
    {
        say 'Hi, Bob!';
        greet_user();
    }

=end programlisting

... though the double negative implied by the presence of the C<else> block may
be difficult to read.

X<control flow directives; C<elsif>>

If you have lots of conditions to check--and if they're mutually exclusive--use
one or more C<elsif> directives:

=begin programlisting

    if ($name eq 'Bob')
    {
        say 'Hi, Bob!';
        greet_user();
    }
    elsif ($name eq 'Jim')
    {
        say 'Hi, Jim!';
        greet_user();
    }
    else
    {
        say "You're not my uncle.";
        shun_user();
    }

=end programlisting

An C<unless> chain may also use an C<elsif> blockN<Good luck deciphering
that!>. There is no C<elseunless>.

Writing C<else if> is a syntax errorN<Larry prefers C<elsif> for aesthetic
reasons, as well the prior art of the Ada programming language.>:

=begin programlisting

    if ($name eq 'Rick')
    {
        say 'Hi, cousin!';
    }

    # warning; syntax error
    else if ($name eq 'Kristen')
    {
        say 'Hi, cousin-in-law!';
    }

=end programlisting

=head2 The Ternary Conditional Operator

X<ternary conditional>
X<control flow directives; ternary conditional>

The I<ternary conditional> operator evaluates a conditional expression and
evaluates to one of two alternatives:

=begin programlisting

    my $time_suffix = after_noon($time)
                    ? 'afternoon'
                    : 'morning';

=end programlisting

The conditional expression precedes the question mark character (C<?>) and the
colon character (C<:>) separates the alternatives. The alternatives are
expressions of arbitrary complexity--including other ternary conditional
expressions.

=begin sidebar

An interesting, though obscure, idiom is to use the ternary conditional to
select between alternative I<variables>, not only values:

=begin programlisting

    push @{ rand() > 0.5 ? \@red_team : \@blue_team },
        Player->new;

=end programlisting

Again, weigh the benefits of clarity versus the benefits of conciseness.

=end sidebar

=head3 Short Circuiting

Z<short_circuiting>
X<short-circuiting>

Perl exhibits I<short-circuiting> behavior when it encounters complex
conditional expressions. When Perl can determine that a complex expression
would succeed or fail as a whole without evaluating every subexpression, it
will not evaluate subsequent subexpressions. This is most obvious with an
example:

=begin programlisting

    say 'Both true!' if ok( 1, 'subexpression one' )
                     && ok( 1, 'subexpression two' );

    done_testing();

=end programlisting

The return value of C<ok()> (L<testing>) is the boolean value produced by the
first argument, so the example prints:

=begin screen

    ok 1 - subexpression one
    ok 2 - subexpression two
    Both true!

=end screen

When the first subexpression--the first call to C<ok>--evaluates to a true
value, Perl must evaluate the second subexpression. If the first subexpression
had evaluated to a false value, there would be no need to check subsequent
subexpressions, as the entire expression could not succeed:

=begin programlisting

    say 'Both true!' if ok( 0, 'subexpression one' )
                     && ok( 1, 'subexpression two' );

=end programlisting

This example prints:

=begin screen

    not ok 1 - subexpression one

=end screen

Even though the second subexpression would obviously succeed, Perl never
evaluates it. The same short-circuiting behavior is evident for logical-or
operations:

=begin programlisting

    say 'Either true!' if ok( 1, 'subexpression one' )
                       || ok( 1, 'subexpression two' );

=end programlisting

This example prints:

=begin screen

    ok 1 - subexpression one
    Either true!

=end screen

With the success of the first subexpression, Perl can avoid evaluating the
second subexpression. If the first subexpression were false, the result of
evaluating the second subexpression would dictate the result of evaluating the
entire expression.

Besides allowing you to avoid potentially expensive computations, short
circuiting can help you to avoid errors and warnings, as in the case where
using an undefined value might raise a warning:

=begin programlisting

    my $bbq;
    if (defined $bbq and $bbq eq 'brisket') { ... }

=end programlisting

=head2 Context for Conditional Directives

X<context; conditional>
X<boolean; true>
X<true>
X<false>

The conditional directives--C<if>, C<unless>, and the ternary conditional
operator--all evaluate an expression in boolean context
(L<context_philosophy>). As comparison operators such as C<eq>, C<==>, C<ne>,
and C<!=> all produce boolean results when evaluated, Perl coerces the results
of other expressions--including variables and values--into boolean forms.

Perl has no single true value nor a single false value. Any number which
evaluates to 0 is false. This includes C<0>, C<0.0>, C<0e0>, C<0x0>, and so on.
The empty string (C<''>) and C<'0'> evaluate to a false value, but the strings
C<'0.0'>, C<'0e0'>, and so on do not. The idiom C<'0 but true'> evaluates to 0
in numeric context but true in boolean context, thanks to its string contents.

Both the empty list and C<undef> evaluate to a false value. Empty arrays and
hashes return the number 0 in scalar context, so they evaluate to a false value
in boolean context. An array which contains a single element--even
C<undef>--evaluates to true in boolean context. A hash which contains any
elements--even a key and a value of C<undef>--evaluates to a true value in
boolean context.

=begin tip Greater Control Over Context

X<CPAN; C<Want>>
X<pragmas; C<overloading>>

The C<Want> module from the CPAN allows you to detect boolean context within
your own functions. The core C<overloading> pragma (L<overloading>) allows you
to specify what your own data types produce when evaluated in various contexts.

=end tip

=head2 Looping Directives

Z<looping_directives>

X<looping directives; C<for>>
X<looping directives; C<foreach>>

Perl provides several directives for looping and iteration. The
I<foreach>-style loop evaluates an expression which produces a list and
executes a statement or block until it has exhausted that list:

=begin programlisting

    foreach (1 .. 10)
    {
        say "$_ * $_ = ", $_ * $_;
    }

=end programlisting

This example uses the range operator to produce a list of integers from one to
ten inclusive. The C<foreach> directive loops over them, setting the topic
variable C<$_> (L<default_scalar_variable>) to each in turn. Perl executes the
block for each integer and, as a result, prints the squares of the integers.

=begin tip C<foreach> versus C<for>

X<builtins; C<for>>
X<builtins; C<foreach>>

Many Perl programmers refer to iteration as C<foreach> loops, but Perl treats
the names C<foreach> and C<for> interchangeably. The parenthesized expression
determines the type and behavior of the loop; the keyword does not.

=end tip

Like C<if> and C<unless>, this loop has a postfix form:

=begin programlisting

    say "$_ * $_ = ", $_ * $_ for 1 .. 10;

=end programlisting

A C<for> loop may use a named variable instead of the topic:

=begin programlisting

    for my $i (1 .. 10)
    {
        say "$i * $i = ", $i * $i;
    }

=end programlisting

When a C<for> loop uses an iterator variable, the variable scope is I<within>
the loop. Perl will set this lexical to the value of each item in the
iteration. Perl will not modify the topic variable (C<$_>). If you have
declared a lexical C<$i> in an outer scope, its value will persist outside the
loop:

=begin programlisting

    my $i = 'cow';

    for my $i (1 .. 10)
    {
        say "$i * $i = ", $i * $i;
    }

    is( $i, 'cow', 'Value preserved in outer scope' );

=end programlisting

This localization occurs even if you do not redeclare the iteration variable as
a lexicalN<... but I<do> declare your iteration variables as lexicals to reduce
their scope.>:

=begin programlisting

    my $i = 'horse';

    for $i (1 .. 10)
    {
        say "$i * $i = ", $i * $i;
    }

    is( $i, 'horse', 'Value preserved in outer scope' );

=end programlisting

=head2 Iteration and Aliasing

Z<iteration_and_aliasing>

X<iteration; aliasing>
X<aliasing>
X<aliasing; iteration>

The C<for> loop I<aliases> the iterator variable to the values in the iteration
such that any modifications to the value of the iterator modifies the iterated
value in place:

=begin programlisting

    my @nums = 1 .. 10;

    $_ **= 2 for @nums;

    is( $nums[0], 1, '1 * 1 is 1' );
    is( $nums[1], 4, '2 * 2 is 4' );

    ...

    is( $nums[9], 100, '10 * 10 is 100' );

=end programlisting

This aliasing also works with the block style C<for> loop:

=begin programlisting

    for my $num (@nums)
    {
        $num **= 2;
    }

=end programlisting

... as well as iteration with the topic variable:

=begin programlisting

    for (@nums)
    {
        $_ **= 2;
    }

=end programlisting

You cannot use aliasing to modify I<constant> values, however. Perl will
produce an exception about modification of read-only values.

=begin programlisting

    $_++ and say for qw( Huex Dewex Louid );

=end programlisting

You may occasionally see the use of C<for> with a single scalar variable:

=begin programlisting

    for ($user_input)
    {
        s/\A\s+//;      # trim leading whitespace
        s/\s+\z//;      # trim trailing whitespace

        $_ = quotemeta; # escape non-word characters
    }

=end programlisting

This idiom (L<idioms>) uses the iteration operator for its side effect of
aliasing C<$_>. Usually it's clearer to operate on the named variable itself.

=head2 Iteration and Scoping

X<iteration; scoping>
X<scope; iterator>

The topic variable's iterator scoping has a subtle gotcha. Consider a function
C<topic_mangler()> which modifies C<$_> on purpose. If code iterating over a
list called C<topic_mangler()> without protecting C<$_>, you'd have to spend
some time debugging the effects:

=begin programlisting

    for (@values)
    {
        topic_mangler();
    }

    sub topic_mangler
    {
        s/foo/bar/;
    }

=end programlisting

Yes, the substitution in C<topic_mangler()> will modify elements of C<@values>
in place. If you I<must> use C<$_> rather than a named variable, use the topic
aliasing behavior of C<for>:

=begin programlisting

    sub topic_mangler
    {
        # was $_ = shift;
        B<for (shift)>
        {
            s/foo/bar/;
            s/baz/quux/;
            return $_;
        }
    }

=end programlisting

Alternately, use a named iteration variable in the C<for> loop. That's almost
always the right advice.

=head2 The C-Style For Loop

X<loops; C<for>>

The C-style I<for loop> requires you to manage the conditions of iteration:

=begin programlisting

    for (my $i = 0; $i <= 10; $i += 2)
    {
        say "$i * $i = ", $i * $i;
    }

=end programlisting

You must explicitly assign to an iteration variable in the looping construct,
as this loop performs neither aliasing nor assignment to the topic variable.
While any variable declared in the loop construct is scoped to the lexical
block of the loop, Perl will not limit the lexical scope of a variable declared
outside of the loop construct:

=begin programlisting

    my $i = 'pig';

    for ($i = 0; $i <= 10; $i += 2)
    {
        say "$i * $i = ", $i * $i;
    }

    isnt( $i, 'pig', '$i overwritten with a number' );

=end programlisting

The looping construct may have three subexpressions. The first
subexpression--the initialization section--executes only once, before the loop
body executes. Perl evaluates the second subexpression--the conditional
comparison--before each iteration of the loop body. When this evaluates to a
true value, iteration proceeds. When it evaluates to a false value, iteration
stops. The final subexpression executes after each iteration of the loop body.

=begin programlisting

    for (
        # loop initialization subexpression
        say 'Initializing', my $i = 0;

        # conditional comparison subexpression
        say "Iteration: $i" and $i < 10;

        # iteration ending subexpression
        say 'Incrementing ' . $i++
    )
    {
        say "$i * $i = ", $i * $i;
    }

=end programlisting

Note the lack of a semicolon after the final subexpression as well as the use
of the comma operator and low-precedence C<and>; this syntax is surprisingly
finicky. When possible, prefer the C<foreach>-style loop to the C<for> loop.

All three subexpressions are optional. One infinite C<for> loop is:

=begin programlisting

    for (;;) { ... }

=end programlisting

=head2 While and Until

X<loops; C<while>>

A I<while> loop continues until the loop conditional expression evaluates to a
boolean false value. An idiomatic infinite loop is:

=begin programlisting

    while (1) { ... }

=end programlisting

Unlike the iteration C<foreach>-style loop, the C<while> loop's condition has
no side effects. If C<@values> has one or more elements, this code is also an
infinite loop, because every iteration will evaluate C<@values> in scalar
context to a non-zero value and iteration will continue:

=begin programlisting

    while (@values)
    {
        say $values[0];
    }

=end programlisting

X<destructive update>

To prevent such an infinite C<while> loop, use a I<destructive update> of the
C<@values> array by modifying the array within each iteration:

=begin programlisting

    while (@values)
    {
        my $value = shift @values;
        say $value;
    }

=end programlisting

Modifying C<@values> inside of the C<while> condition check also works, but it
has some subtleties related to the truthiness of each value.

=begin programlisting

    while (my $value = shift @values)
    {
        say $value;
    }

=end programlisting

This loop will exit as soon as it reaches an element that evaluates to a false
value, not necessarily when it has exhausted the array. That may be the desired
behavior, but it probably deserves a comment to explain why.

X<loops; C<until>>

The I<until> loop reverses the sense of the test of the C<while> loop.
Iteration continues while the loop conditional expression evaluates to a false
value:

=begin programlisting

    until ($finished_running)
    {
        ...
    }

=end programlisting

The canonical use of the C<while> loop is to iterate over input from a
filehandle:

=begin programlisting

    while (<$fh>)
    {
        # remove newlines
        chomp;
        ...
    }

=end programlisting

Perl interprets this C<while> loop as if you had written:

=begin programlisting

    while (B<defined($_> = <$fh>B<)>)
    {
        # remove newlines
        chomp;
        ...
    }

=end programlisting

Without the implicit C<defined>, any line read from the filehandle which
evaluated to a false value in a scalar context--a blank line or a line which
contained only the character C<0>--would end the loop. The C<readline> (C<< <>
>>) operator returns an undefined value only when it has reached the end of the
file.

Both C<while> and C<until> have postfix forms, such as the infinite loop C<1
while 1;>. Any single expression is suitable for a postfix C<while> or
C<until>, including the classic "Hello, world!" example from 8-bit computers of
the early 1980s:

=begin programlisting

    print "Hello, world!  " while 1;

=end programlisting

Infinite loops are more useful than they seem, especially for event loops in
GUI programs, program interpreters, or network servers:

=begin programlisting

    $server->dispatch_results until $should_shutdown;

=end programlisting

X<loops; C<do>>

Use a C<do> block to group several expressions into a single unit:

=begin programlisting

    do
    {
        say 'What is your name?';
        my $name = <>;
        chomp $name;
        say "Hello, $name!" if $name;
    } until (eof);

=end programlisting

A C<do> block parses as a single expression which may contain several
expressions. Unlike the C<while> loop's block form, the C<do> block with a
postfix C<while> or C<until> will execute its body I<at least> once. This
construct is less common than the other loop forms, but no less powerful.

=head2 Loops within Loops

X<loops; nested>

You may nest loops within other loops:

=begin programlisting

    for my $suit (@suits)
    {
        for my $values (@card_values) { ... }
    }

=end programlisting

When you do this, declare your iteration variables! The potential for confusion
with the topic variable and its scope is too great otherwise.

Novices commonly exhaust filehandles accidentally while nesting C<foreach> and
C<while> loops:

=begin programlisting

    use autodie 'open';
    open my $fh, '<', $some_file;

    for my $prefix (@prefixes)
    {
        # DO NOT USE; buggy code
        while (<$fh>)
        {
            say $prefix, $_;
        }
    }

=end programlisting

Opening the filehandle outside of the C<for> loop leaves the file position
unchanged between each iteration of the C<for> loop. On its second iteration,
the C<while> loop will have nothing to read and will not iterate. You can solve
this problem in many ways; re-open the file inside the C<for> loop (wasteful
but simple), slurp the entire file into memory (works best with small files),
or C<seek> the filehandle back to the beginning of the file for each iteration:

=begin programlisting

    for my $prefix (@prefixes)
    {
        while (<$fh>)
        {
            say $prefix, $_;
        }

        B<seek $fh, 0, 0;>
    }

=end programlisting

=head2 Loop Control

X<loops; control>

Sometimes you need to break out of a loop before you have exhausted the
iteration conditions. Perl's standard control mechanisms--exceptions and
C<return>--work, but you may also use I<loop control> statements.

X<loops; C<next>>

The I<next> statement restarts the loop at its next iteration. Use it when
you've done all you need to in the current iteration. To loop over lines in a
file and skip everything that starts with the comment character C<#>:

=begin programlisting

    while (<$fh>)
    {
        B<next> if /\A#/;
        ...
    }

=end programlisting

=begin tip Multiple Exits versus Nested Ifs

Compare the use of C<next> with the alternative: wrapping the rest of the body
of the block in an C<if>. Now consider what happens if you have multiple
conditions which could cause you to skip a line. Loop control modifiers with
postfix conditionals can make your code much more readable.

=end tip

X<loops; C<last>>

The I<last> statement ends the loop immediately. To finish processing a file
once you've seen the ending token, write:

=begin programlisting

    while (<$fh>)
    {
        next if /\A#/;
        B<last> if /\A__END__/
        ...
    }

=end programlisting

X<loops; C<redo>>

The I<redo> statement restarts the current iteration without evaluating the
conditional again. This can be useful in those few cases where you want to
modify the line you've read in place, then start processing over from the
beginning without clobbering it with another line. To implement a silly file
parser that joins lines which end with a backslash:

=begin programlisting

    while (my $line = <$fh>)
    {
        chomp $line;

        # match backslash at the end of a line
        if ($line =~ s{\\$}{})
        {
            $line .= <$fh>;
            chomp $line;
            B<redo;>
        }

        ...
    }

=end programlisting

X<loops; labels>

Using loop control statements in nested loops can be confusing. If you cannot
avoid nested loops--by extracting inner loops into named functions--use a
I<loop label> to clarify:

=begin programlisting

    LINE:
    while (<$fh>)
    {
        chomp;

        PREFIX:
        for my $prefix (@prefixes)
        {
            next LINE unless $prefix;
            say "$prefix: $_";
            # next PREFIX is implicit here
        }
    }

=end programlisting

=head2 Continue

X<loops; C<continue>>

The C<continue> construct behaves like the third subexpression of a C<for>
loop; Perl executes any continue block before subsequent iterations of a loop,
whether due to normal loop repetition or premature re-iteration from
C<next>N<The Perl equivalent to C's C<continue> is C<next>.>. You may use it
with a C<while>, C<until>, C<when>, or C<for> loop. Examples of C<continue> are
rare, but it's useful any time you want to guarantee that something occurs with
every iteration of the loop, regardless of how that iteration ends:

=begin programlisting

    while ($i < 10 )
    {
        next unless $i % 2;
        say $i;
    }
    B<continue>
    {
        say 'Continuing...';
        $i++;
    }

=end programlisting

Be aware that a C<continue> block does I<not> execute when control flow leaves
a loop due to C<last> or C<redo>.

=head2 Switch Statements

Z<switch_statements>

X<builtins; C<given>>

Perl 5.10 introduced a new construct named C<given> as a Perlish C<switch>
statement. It didn't quite work out; C<given> is still experimental, but it's
less buggy in 5.18 than it was in any previous version of Perl. That's a nice
way of saying "don't use it unless you know what you're doing."

X<builtins; C<when>>

If you need a switch statement, use C<for> to alias the topic variable (C<$_>)
and C<when> to match it against simple expressions with smart match
(L<smart_match>) semantics. To write the Rock, Paper, ScissorsN<Adding Spock
and Lizard is an exercise for the reader.> game:

=begin programlisting

    my @options  = ( \&rock, \&paper, \&scissors );
    my $confused = "I don't understand your move.";

    do
    {
        say "Rock, Paper, Scissors!  Pick one: ";
        chomp( my $user = <STDIN> );
        my $computer_match = $options[ rand @options ];
        $computer_match->( lc( $user ) );
    } until (eof);

    sub rock
    {
        print "I chose rock.  ";

        for (shift)
        {
            when (/paper/)    { say 'You win!' };
            when (/rock/)     { say 'We tie!'  };
            when (/scissors/) { say 'I win!'   };
            default           { say $confused  };
        }
    }

    sub paper
    {
        print "I chose paper.  ";

        for (shift)
        {
            when (/paper/)    { say 'We tie!'  };
            when (/rock/)     { say 'I win!'   };
            when (/scissors/) { say 'You win!' };
            default           { say $confused  };
        }
    }

    sub scissors
    {
        print "I chose scissors.  ";

        for (shift)
        {
            when (/paper/)    { say 'I win!'   };
            when (/rock/)     { say 'You win!' };
            when (/scissors/) { say 'We tie!'  };
            default           { say $confused  };
        }
    }

=end programlisting

Perl executes the C<default> rule when none of the other conditions match.

=begin tip Simplified Dispatch with Multimethods

X<CPAN; C<MooseX::MultiMethods>>

The CPAN module C<MooseX::MultiMethods> provides another technique to simplify
this code.

=end tip

=head2 Tailcalls

Z<tailcalls>
X<tailcalls>

A I<tailcall> occurs when the last expression within a function is a call to
another function. The outer function's return value becomes the inner
function's return value:

=begin programlisting

    sub log_and_greet_person
    {
        my $name = shift;
        log( "Greeting $name" );

        return greet_person( $name );
    }

=end programlisting

Returning from C<greet_person()> directly to the caller of
C<log_and_greet_person()> is more efficient than returning I<to>
C<log_and_greet_person()> and then I<from> C<log_and_greet_person()>.
Returning directly I<from> C<greet_person()> to the caller of
C<log_and_greet_person()> is a I<tailcall optimization>.

Heavily recursive code (L<recursion>)--especially mutually recursive code--can
consume a lot of memory. Tailcalls reduce the memory needed for internal
bookkeeping of control flow and can make expensive algorithms cheaper.
Unfortunately, Perl does not automatically perform this optimization, so you
have to do it yourself when it's necessary.

X<builtins; C<goto>>

The builtin C<goto> operator has a form which calls a function as if the
current function were never called, essentially erasing the bookkeeping for the
new function call. The ugly syntax confuses people who've heard "Never use
C<goto>", but it works:

=begin programlisting

    sub log_and_greet_person
    {
        B<my ($name) = @_;>
        log( "Greeting $name" );

        B<goto &greet_person>;
    }

=end programlisting

This example has two important characteristics. First, C<goto &function_name>
or C<goto &$function_reference> requires the use of the function sigil (C<&>)
so that the parser knows to perform a tailcall instead of jumping to a label.
Second, this form of function call passes the contents of C<@_> implicitly to
the called function. You may modify C<@_> to change the passed arguments if you
desire.

This technique is relatively rare; it's most useful when you want to hijack
control flow to get out of the way of other functions inspecting C<caller>
(such as when you're implementing special logging or some sort of debugging
feature), or when using an algorithm which requires a lot of recursion.
Remember it if you need it, but feel free not to use it.
