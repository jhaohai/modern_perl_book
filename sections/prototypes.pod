=head1 Prototypes

Z<prototypes>

X<prototypes>

A I<prototype> is a piece of metadata attached to a function or variable. A
function prototype changes how Perl's parser understands it.

X<builtins; C<push>>

Prototypes allow users to define their own functions which behave like
builtins. Consider the builtin C<push>, which takes an array and a list. While
Perl would normally flatten the array and list into a single list passed to
C<push>, the parser knows to treat the array as a I<container>, not to flatten
its values. In effect, this is like passing a reference to an array and a list
of values to C<push>. The parser's behavior allows C<push> to modify the values
of the container.

Function prototypes attach to function declarations:

=begin programlisting

    sub foo        B<(&@)>;
    sub bar        B<($$)> { ... }
    my  $baz = sub B<(&&)> { ... };

=end programlisting

Any prototype attached to a forward declaration must match the prototype
attached to the function declaration. Perl will give a warning if this is not
true. Strangely you may omit the prototype from a forward declaration and
include it for the full declaration--but there's no reason to do so.

X<builtins; C<prototype>>

The builtin C<prototype> takes the name of a function and returns a string
representing its prototype.

To see the prototype of a builtin, use the C<CORE::> form of the builtin's name as the operand to C<prototype>:

=begin screen

    $ B<perl -E "say prototype 'CORE::push';">
    \@@
    $ B<perl -E "say prototype 'CORE::keys';">
    \%
    $ B<perl -E "say prototype 'CORE::open';">
    *;$@

=end screen

C<prototype> will return C<undef> for those builtins whose functions you cannot
emulate:

=begin screen

    B<say prototype 'CORE::system' // 'undef'>
    # undef; cannot emulate builtin C<system>

    B<say prototype 'CORE::prototype' // 'undef'>
    # undef; builtin C<prototype> has no prototype

=end screen

Remember C<push>?

=begin screen

    $ B<perl -E "say prototype 'CORE::push';">
    \@@

=end screen

The C<@> character represents a list. The backslash forces the use of a
I<reference> to the corresponding argument. This prototype means that C<push>
takes a reference to an array and a list of values. You might write C<mypush>
as:

=begin programlisting

    sub mypush (\@@)
    {
        my ($array, @rest) = @_;
        push @$array, @rest;
    }

=end programlisting

Other prototype characters include C<$> to force a scalar argument, C<%> to
mark a hash (most often used as a reference), and C<&> to identify a code
block. See C<perldoc perlsub> for more information.

=head2 The Problem with Prototypes

Prototypes change how Perl parses your code and how Perl coerces arguments to
your functions. While these prototypes may superficially resemble function
signatures in other languages, they are very different. They do not document
the number or types of arguments functions expect, nor do they map arguments to
named parameters.

Prototype coercions work in subtle ways, such as enforcing scalar context on
incoming arguments:

=begin programlisting

    sub numeric_equality($$)
    {
        my ($left, $right) = @_;
        return $left == $right;
    }

    my @nums = 1 .. 10;

    say 'They're equal, whatever that means!'
        if numeric_equality @nums, 10;

=end programlisting

... but only work on simple expressions:

=begin programlisting

    sub mypush(\@@);

    # compilation error: prototype mismatch
    # (expects array, gets scalar assignment)
    mypush( my $elems = [], 1 .. 20 );

=end programlisting

To debug this, users of C<mypush> must know both that a prototype exists, and
the limitations of the array prototype.

=begin tip Debugging Prototype Errors

If you think this error message is inscrutable, wait until you see the
I<complicated> prototype errors.

=end tip

=head2 Good Uses of Prototypes

X<builtins; overriding>
X<pragmas; C<subs>>
X<C<subs> pragma>

Prototypes I<do> have a few good uses that outweigh their problems. For
example, you can use a prototyped function to override one of Perl's builtins.
First check that you I<can> override the builtin by examining its prototype in
a small test program. Then use the C<subs> pragma to tell Perl that you plan to
override a builtin, and finally declare your override with the correct
prototype:

=begin programlisting

    use subs 'push';

    sub push (\@@) { ... }

=end programlisting

Beware that the C<subs> pragma is in effect for the remainder of the I<file>,
regardless of any lexical scoping.

X<constants>

The second reason to use prototypes is to define compile-time constants. When
Perl encounters a function declared with an empty prototype (as opposed to
I<no> prototype) I<and> this function evaluates to a single constant
expression, the optimizer will turn all calls to that function into constants
instead of function calls:

=begin programlisting

    sub PI () { 4 * atan2(1, 1) }

=end programlisting

All subsequent code will use the calculated value of pi in place of the
bareword C<PI> or a call to C<PI()>, with respect to scoping and visibility.

X<C<constant> pragma>
X<pragmas; C<constant>>
X<CPAN; C<Const::Fast>>

The core pragma C<constant> handles these details for you. The C<Const::Fast>
module from the CPAN creates constant scalars which you can interpolate into
strings.

X<CPAN; C<Test::Exception>>
X<CPAN; C<Test::Fatal>>

A reasonable use of prototypes is to extend Perl's syntax to operate on
anonymous functions as blocks. The CPAN module C<Test::Exception> uses this to
good effect to provide a nice API with delayed computationN<See also
C<Test::Fatal>>. Its C<throws_ok()> function takes three arguments: a block of
code to run, a regular expression to match against the string of the exception,
and an optional description of the test:

=begin programlisting

    use Test::More;
    use Test::Exception;

    throws_ok
        { my $unobject; $unobject->yoink }
        qr/Can't call method "yoink" on an undefined/,
        'Method on undefined invocant should fail';

    done_testing();

=end programlisting

The exported C<throws_ok()> function has a prototype of C<&$;$>. Its first
argument is a block, which becomes an anonymous function. The second argument
is a scalar. The third argument is optional.

Careful readers may have spotted the absence of a comma after the block.  This
is a quirk of Perl's parser, which expects whitespace after a prototyped block,
not the comma operator. This is a drawback of the prototype syntax. If that
bothers you, use C<throws_ok()> without taking advantage of the prototype:

=begin programlisting

    use Test::More;
    use Test::Exception;

    throws_okB<(>
        B<sub> { my $unobject; $unobject->yoink() }B<,>
        qr/Can't call method "yoink" on an undefined/,
        'Method on undefined invocant should fail' B<)>;

    done_testing();

=end programlisting

X<builtins; C<sort>>

A final good use of prototypes is when defining a custom named function to use
with C<sort>N<Ben Tilly suggested this example.>:

=begin programlisting

    sub length_sort ($$)
    {
        my ($left, $right) = @_;
        return length($left) <=> length($right);
    }

    my @sorted = sort length_sort @unsorted;

=end programlisting

The prototype of C<$$> forces Perl to pass the sort pairs in C<@_>. C<sort>'s
documentation suggests that this is slightly slower than using the package
globals C<$a> and C<$b>, but using lexical variables often makes up for any
speed penalty.
