=head1 Indirect Objects

Z<indirect_objects>

Perl has no operator C<new>. A constructor is anything which returns an object.
By convention, constructors are class methods named C<new()>, but you can name
these methods (or even use I<functions>). Several old Perl OO tutorials promote
the use of C++ and Java-style constructor calls:

=begin programlisting

    my $q = B<new> CGI; # DO NOT USE

=end programlisting

... instead of the obvious method call:

=begin programlisting

    my $q = CGI->new;

=end programlisting

These syntaxes produce equivalent behavior, except when they don't.

=head2 Bareword Indirect Invocations

X<indirect object notation>
X<dative notation>

In the indirect object form (more precisely, the I<dative> case) of the first
example, the verb (the method) precedes the noun to which it refers (the
object). This is fine in spoken languages, but it introduces parsing
ambiguities in Perl.

Because the method's name is a bareword (L<barewords>), the parser uses several
heuristics to figure out the proper interpretation of this code. While these
heuristics are well-tested and I<almost> always correct, their failure modes
are confusing. Things get worse when you pass arguments to a constructor:

=begin programlisting

    # DO NOT USE
    my $obj = new Class( arg => $value );

=end programlisting

In this example, the I<name> of the class looks like a function call. Perl
I<can> disambiguate many of these cases, but its heuristics depend on which
package names the parser has seen, which barewords it has already resolved (and
how it resolved them), and the I<names> of functions already declared in the
current package. For an exhaustive list of these conditions, you have to read
the source code of Perl's parser--not something the average Perl programmer
wants to do.

Imagine running afoul of a prototyped function (L<prototypes>) with a name
which just happens to conflict somehow with the name of a class or a method
called indirectly. This is rareN<It's happened to your author when using the
C<JSON> module.>, but so unpleasant to debug that it's worth avoiding indirect
invocations.

=head2 Indirect Notation Scalar Limitations

Another danger of the indirect syntax is that the parser expects a single
scalar expression as the object. Printing to a filehandle stored in an
aggregate variable I<seems> obvious, but it is not:

=begin programlisting

    # DOES NOT WORK AS WRITTEN
    say $config->{output} 'Fun diagnostic message!';

=end programlisting

Perl will attempt to call C<say> on the C<$config> object.

X<builtins; C<print>>
X<builtins; C<close>>
X<builtins; C<say>>

C<print>, C<close>, and C<say>--all builtins which operate on
filehandles--operate in an indirect fashion. This was fine when filehandles
were package globals, but lexical filehandles (L<lexical_filehandles>) make the
indirect object syntax problems obvious. To solve this, disambiguate the
subexpression which produces the intended invocant:

=begin programlisting

    say B<{>$config->{output}B<}> 'Fun diagnostic message!';

=end programlisting

=head2 Alternatives to Indirect Notation

Direct invocation notation does not suffer this ambiguity problem. To construct
an object, call the constructor method on the class name directly:

=begin programlisting

    my $q   = Plack::Request->new;
    my $obj = Class->new( arg => $value );

=end programlisting

This syntax I<still> has a bareword problem in that if you have a function
named C<Request> in the C<Plack> namespace, Perl will interpret the bareword
class name as a call to the function, as:

=begin programlisting

    sub Plack::Request;

    # you wrote Plack::Reuqest->new, but Perl saw
    my $q = Plack::Request()->new;

=end programlisting

While this happens rarely, you can disambiguate classnames by appending the
package separator (C<::>) or by explicitly marking class names as string
literals:

=begin programlisting

    # package separator
    my $q = Plack::Request::->new;

    # unambiguously a string literal
    my $q = 'Plack::Request'->new;

=end programlisting

Almost no one ever does this.

X<C<IO::File>>

For the limited case of filehandle operations, the dative use is so prevalent
that you can use the indirect invocation approach if you surround your intended
invocant with curly brackets. If you're using Perl 5.14 or newer (or if you
load C<IO::File> or C<IO::Handle>), you can use methods on lexical
filehandlesN<Almost no one does this for C<print> and C<say>.>.

X<CPAN; C<Perl::Critic>>
X<CPAN; C<Perl::Critic::Policy::Dynamic::NoIndirect>>
X<CPAN; C<indirect>>

The CPAN module C<Perl::Critic::Policy::Dynamic::NoIndirect> (a plugin for
C<Perl::Critic>) can analyze your code to find indirect invocations. The CPAN
module C<indirect> can identify and prohibit their use in running programs:

=begin programlisting

    # warn on indirect use
    no indirect;

    # throw exceptions on their use
    no indirect ':fatal';

=end programlisting
